BUMO NODEJS SDK 指南
====================

概述
----

本文档简要概述BUMO NODEJS SDK常用接口, 让开发者更方便地写入和查询BU区块链。

术语
----

本章节对该文档中使用到的术语进行了详细说明。

**操作BU区块链** 

操作BU区块链是指向BU区块链写入或修改数据。

**广播交易**

广播交易是指向BU区块链发送交易，触发交易的执行。

**查询BU区块链** 

查询BU区块链是指查询BU区块链中的数据。

**账户服务** 

账户服务提供了账户相关的有效性校验与查询接口。

**资产服务** 

资产服务提供了资产相关的查询接口。


**交易服务**

交易服务提供了写入与查询BU区块链的接口。

**区块服务** 

区块服务提供了区块的查询接口。

**账户nonce值** 

账户nonce值用于标识用户提交交易时交易执行的顺序，每个账户都维护一个nonce序列号。

请求参数与响应数据格式
--------------------

本章节将详细介绍请求参数与响应数据的格式。

请求参数
~~~~~~~~

为了保证数字精度，请求参数中的Number类型，都按字符串处理。例如，amount = 500， 那么传递参数时将其更改为 amount = '500' 的字符串形式。

响应数据
~~~~~~~~

接口的响应数据为 ``JavaScript`` 对象，数据格式如下：

::


 {
	errorCode: 0,
	errorDesc: '',
	result: {}
 }

.. note:: |
       - errorCode: 错误码。0表示无错误，大于0表示有错误。

       - errorDesc: 错误描述。 

       - result:返回结果。

 因响应数据结构固定，方便起见，后续接口说明中的响应数据均指 result 对象的属性。


使用方法
--------

本章节介绍SDK的使用流程。首先需要生成SDK实例，然后调用相应服务的接口。服务包括 `账户服务`_、`资产服务`_、`合约服务`_、`交易服务`_、`区块服务`_。接口按用途分为生成公私钥地址接口、有效性校验接口、查询接口、广播交易相关接口。

安装SDK
~~~~~~~

使用SDK之前先通过以下方式安装BUMO SDK：

::

 npm install bumo-sdk --save


生成SDK实例
~~~~~~~~~~~

生成SDK实例时的传入参数 options 是一个对象，options 包含如下属性：

+---------+--------+------------------------------+
| 参数    | 类型   | 描述                         |
+=========+========+==============================+
| host    | String | ip地址:端口                  |
+---------+--------+------------------------------+


实例如下：

::
 
 const BumoSDK = require('bumo-sdk');

 const options = {
  host: 'seed1.bumotest.io:26002',
 };

 const sdk = new BumoSDK(options);

信息查询
~~~~~~~~

查询接口用于查询BU区块链上的数据，直接调用相应的接口即可实现。比如查询账户信息，具体调用如下所示：

::

 const address = 'buQemmMwmRQY1JkcU7w3nhruo%X5N3j6C29uo';

 sdk.account.getInfo(address).then(info=> {
  console.log(info);
 }).catch(err => {
  console.log(err.message);
 });



提交交易
~~~~~~~~

提交交易的过程包括以下几步：

`1. 获取账户nonce值`_

`2. 构建操作`_

`3. 构建交易Blob`_

`4. 签名交易`_

`5. 广播交易`_

1. 获取账户nonce值
^^^^^^^^^^^^^^^^^^

开发者可自己维护各个账户 nonce，在提交完一个交易后，nonce 值自动递增1，这样可以在短时间内发送多笔交易；否则，必须等上一个交易执行完成后，账户的nonce值才会加1。接口调用如下：

::

 const address = 'buQemmMwmRQY1JkcU7w3nhruo%X5N3j6C29uo';

 sdk.account.getNonce(address).then(info => {

  if (info.errorCode !== 0) {
    console.log(info);
    return;
  }

  const nonce = new BigNumber(info.result.nonce).plus(1).toString(10);
 });

 // 本例中使用了big-number.js 将nonce的值加1，并返回字符串类型

2. 构建操作
^^^^^^^^^^^

这里的操作是指在交易中做的一些动作。例如：构建发送BU操作BUSendOperation，调用如下:

::

 const destAddress = 'buQWESXjdgXSFFajEZfkwi5H4fuAyTGgzkje';

 const info = sdk.operation.buSendOperation({
	destAddress,
	amount: '60000',
	metadata: '746573742073656e64206275',
 });

3. 构建交易Blob
^^^^^^^^^^^^^^^

构建交易Blob接口用于生成交易Blob串，接口调用如下：

::

  let blobInfo = sdk.transaction.buildBlob({
    sourceAddress: 'buQnc3AGCo6ycWJCce516MDbPHKjK7ywwkuo',
    gasPrice: '3000',
    feeLimit: '1000',
    nonce: '102',
    operations: [ sendBuOperation ],
    metadata: '74657374206275696c6420626c6f62',
  });

  const blob = blobInfo.result;

.. note:: nonce、gasPrice、feeLimit 是只能包含数字的字符串且不能以0开头。

4. 签名交易
^^^^^^^^^^^

签名交易接口用于交易发起者使用私钥对交易进行签名。接口调用如下：

::

   const signatureInfo = sdk.transaction.sign({
    privateKeys: [ privateKey ],
    blob,
  });

  const signature = signatureInfo.result;

5. 广播交易
^^^^^^^^^^^

广播交易接口用于向BU区块链发送交易，触发交易的执行。接口调用如下：

::

   sdk.transaction.submit({
    blob,
    signature: signature,
  }).then(data => {
  	console.log(data);
  });

账户服务
--------

账户服务主要是账户相关的接口，包括：``create``、``checkValid``、``getInfo-Account``、``getNonce``、
``getBalance``、``getAssets``、``GetMetadata``。

create
~~~~~~

``create`` 接口用于形成私钥及地址。

调用方法如下：

::

 sdk.account.create()

响应数据如下表：

+------------+--------+------+
| 参数       | 类型   | 描述 |
+============+========+======+
| privateKey | String | 私钥 |
+------------+--------+------+
| publicKey  | String | 公钥 |
+------------+--------+------+
| address    | String | 地址 |
+------------+--------+------+

具体示例如下所示：

::

 sdk.account.create().then(result => {
  console.log(result);
 }).catch(err => {
  console.log(err.message);
 });


checkValid
~~~~~~~~~~

``checkValid`` 接口用于检测账户地址的有效性。

调用方法如下：

::

 sdk.account.checkValid(address)

请求参数如下表：

+---------+--------+------------------------------+
| 参数    | 类型   | 描述                         |
+=========+========+==============================+
| address | String | 待检测的账户地址             |
+---------+--------+------------------------------+

响应数据如下表：

+---------+--------+------------------------------+
| 参数    | 类型   | 描述                         |
+=========+========+==============================+
| isValid | Boolean| 账户地址是否有效             |
+---------+--------+------------------------------+

错误码如下表：

+--------------+--------+--------------+
| 异常         | 错误码 | 描述         |
+==============+========+==============+
| SYSTEM_ERROR | 20000  | System error |
+--------------+--------+--------------+

具体示例如下所示：

::

 const address = 'buQemmMwmRQY1JkcU7w3nhruoX5N3j6C29uo';

 sdk.account.checkValid(address).then(result => {
  console.log(result);
 }).catch(err => {
  console.log(err.message);
 });


getInfo-Account
~~~~~~~~~~~~~~~~

``getInfo-Account`` 接口用于查询账户信息。

调用方法如下：

::

 sdk.account.getInfo(address);

请求参数如下表：

+---------+--------+------------------+
| 参数    | 类型   | 描述             |
+=========+========+==================+
| address | String | 待检测的账户地址 |
+---------+--------+------------------+

响应数据如下表：

+---------+------------------+----------------+
| 参数    | 类型             | 描述           |
+=========+==================+================+
| address | String           | 账户地址       |
+---------+------------------+----------------+
| balance | String           | 账户余额       |
+---------+------------------+----------------+
| nonce   | String           | 账户交易序列号 |
+---------+------------------+----------------+
| priv    | Object           | 账户权限       |
+---------+------------------+----------------+ 

错误码如下表：

+-----------------------+--------+-------------------------+
| 异常                  | 错误码 | 描述                    |
+=======================+========+=========================+
| INVALID_ADDRESS_ERROR | 11006  | Invalid address         |
+-----------------------+--------+-------------------------+
| CONNECTNETWORK_ERROR  | 11007  | Failed to connect to    |
|                       |        | the network             |
+-----------------------+--------+-------------------------+
| SYSTEM_ERROR          | 20000  | System error            |
+-----------------------+--------+-------------------------+

具体示例如下所示：

::

 const address = 'buQemmMwmRQY1JkcU7w3nhruo%X5N3j6C29uo';

 sdk.account.getInfo(address).then(result => {
  console.log(result);
 }).catch(err => {
  console.log(err.message);
 });

接口对象类型参考
^^^^^^^^^^^^^^^

下面是 ``getInfo-Account`` 的接口对象类型：

priv
++++

+--------------+----------------+--------------+
| 参数         | 类型           | 描述         |
+==============+================+==============+
| master_weight| String         | 账户自身权重 |
+--------------+----------------+--------------+
| signers      | Object         | 签名者权重   |
+--------------+----------------+--------------+
| thresholds   | Object         | 门限         |
+--------------+----------------+--------------+

signers
++++++++

+---------+--------+--------------+
| 参数    | 类型   | 描述         |
+=========+========+==============+
| address | String | 签名账户地址 |
+---------+--------+--------------+
| weight  | String | 签名账户权重 |
+---------+--------+--------------+

thresholds
++++++++++

+----------------+-------------------+--------------------+
| 参数           | 类型              | 描述               |
+================+===================+====================+
| tx_threshold   | string            | 交易默认门限       |
+----------------+-------------------+--------------------+
| type_thresholds| Object            | 不同类型交易的门限 |
+----------------+-------------------+--------------------+

type_thresholds
++++++++++++++++

+-----------+-------+----------+
| 参数      | 类型  | 描述     |
+===========+=======+==========+
| type      | String| 操作类型 |
+-----------+-------+----------+
| threshold | String| 门限     |
+-----------+-------+----------+

getNonce
~~~~~~~~~

``getNonce`` 接口用于获取账户的 nonce 值。

调用方法如下：

::

 sdk.account.getNonce(address);

请求参数如下表：

+---------+--------+------------------+
| 参数    | 类型   | 描述             |
+=========+========+==================+
| address | String | 待检测的账户地址 |
+---------+--------+------------------+

响应数据如下表：

+---------+--------+--------------------+
| 参数    | 类型   | 描述               |
+=========+========+====================+
| nonce   | String | 该账户的交易序列号 |
+---------+--------+--------------------+

错误码如下表：

+-----------------------+--------+-------------------------+
| 异常                  | 错误码 | 描述                    |
+=======================+========+=========================+
| INVALID_ADDRESS_ERROR | 11006  | Invalid address         |
+-----------------------+--------+-------------------------+
| CONNECTNETWORK_ERROR  | 11007  | Failed to connect to    |
|                       |        | the network             |
+-----------------------+--------+-------------------------+
| SYSTEM_ERROR          | 20000  | System error            |
+-----------------------+--------+-------------------------+

具体示例如下所示：

::

 const address = 'buQswSaKDACkrFsnP1wcVsLAUzXQsemauEjf';

 sdk.account.getNonce(address).then(result => {
  console.log(result);
 }).catch(err => {
  console.log(err.message);
 });



getBalance
~~~~~~~~~~~

``getBalance`` 接口用于查询账户的BU余额。

调用方法如下：

::

 sdk.account.getBalance(address);

请求参数如下表：

+---------+--------+------------------+
| 参数    | 类型   | 描述             |
+=========+========+==================+
| address | String | 待检测的账户地址 |
+---------+--------+------------------+

响应数据如下表：

+---------+-------+--------------+
| 参数    | 类型  | 描述         |
+=========+=======+==============+
| balance | String| 该账户的余额 |
+---------+-------+--------------+

错误码如下表：

+-----------------------+--------+-------------------------+
| 异常                  | 错误码 | 描述                    |
+=======================+========+=========================+
| INVALID_ADDRESS_ERROR | 11006  | Invalid address         |
+-----------------------+--------+-------------------------+
| CONNECTNETWORK_ERROR  | 11007  | Failed to connect to    |
|                       |        | the network             |
+-----------------------+--------+-------------------------+
| SYSTEM_ERROR          | 20000  | System error            |
+-----------------------+--------+-------------------------+

具体示例如下所示：

::

 const address = 'buQswSaKDACkrFsnP1wcVsLAUzXQsemauEjf';

 const info = sdk.account.getBalance(address);




getAssets
~~~~~~~~~~

``getAssets`` 接口用于获取账户的所有资产信息。

调用方法如下：

::

 sdk.account.getAssets(address);

请求参数如下表：

+---------+--------+------------------+
| 参数    | 类型   | 描述             |
+=========+========+==================+
| address | String | 待检测的账户地址 |
+---------+--------+------------------+

响应数据如下表：

+--------+--------------+----------+
| 参数   | 类型         | 描述     |
+========+==============+==========+
| assets | Array        | 账户资产 |
+--------+--------------+----------+

错误码如下表：

+-----------------------+--------+-------------------------+
| 异常                  | 错误码 | 描述                    |
+=======================+========+=========================+
| INVALID_ADDRESS_ERROR | 11006  | Invalid address         |
+-----------------------+--------+-------------------------+
| CONNECTNETWORK_ERROR  | 11007  | Failed to connect to    |
|                       |        | the network             |
+-----------------------+--------+-------------------------+
| SYSTEM_ERROR          | 20000  | System error            |
+-----------------------+--------+-------------------------+

具体示例如下所示：

::

 sdk.account.getAssets(address).then(result => {
	console.log(result);
 }).catch(err => {
	console.log(err.message);
 });


接口对象类型参考
^^^^^^^^^^^^^^^

``getAssets`` 接口的响应数据 assets 数组元素为 Object 类型，其中包含如下属性:

+--------+---------+--------------------------------------------------+
| 参数   | 类型    | 描述                                             |
+========+=========+==================================================+
| key    | Object  | 包含属性: code资产编码、issuer资产发行账户地址   |
+--------+---------+--------------------------------------------------+
| amount | String  | 账户资产数量                                     |
+--------+---------+--------------------------------------------------+  

资产服务
--------

资产服务主要是资产相关的接口，目前有1个接口：``getInfo-Asset`` 。

``getInfo-Asset`` 接口用于获取账户指定资产信息。

调用方法如下：

::

 sdk.token.asset.getInfo(args);

响应数据如下表：

+--------+-----------------+----------+
| 参数   | 类型            | 描述     |
+========+=================+==========+
| asset  | Array           | 账户资产 |
+--------+-----------------+----------+

错误码如下表：

+--------------------------+-----------+------------------+
| 异常                     | 错误码    | 描述             |
+==========================+===========+==================+
| INVALID_ADDRESS_ERROR    | 11006     | Invalid address  |
+--------------------------+-----------+------------------+
| CONNECTNETWORK_ERROR     | 11007     | Failed to connect|
|                          |           | to the network   |
+--------------------------+-----------+------------------+
| INVALID_ASSET_CODE_ERROR | 11023     | The length of    |
|                          |           | code must        |
|                          |           | be between 1 and |
|                          |           | 1024             |
+--------------------------+-----------+------------------+
| INVALID_ISSUER_ADDRESS   | 11027     | Invalid issuer   |
| _ERROR                   |           | address          |
+--------------------------+-----------+------------------+
| SYSTEM_ERROR             | 20000     | System error     |
+--------------------------+-----------+------------------+

具体示例如下所示：

::

 const args = {
	address: 'buQnnUEBREw2hB6pWHGPzwanX7d28xk6KVcp',
	code: 'TST',
	issuer: 'buQnnUEBREw2hB6pWHGPzwanX7d28xk6KVcp',
 };


 sdk.token.asset.getInfo(args).then(data => {
  console.log(data);
 });



接口对象类型参考
^^^^^^^^^^^^^^^

``getInfo-Asset`` 接口请求参数 args 为 Object 类型，其中包含如下属性：

+---------+--------+-----------------------------+
| 参数    | 类型   | 描述                        |
+=========+========+=============================+
| address | String | 必填，待查询的账户地址      |
+---------+--------+-----------------------------+
| code    | String | 必填，资产编码，长度[1,1024]|
+---------+--------+-----------------------------+
| issuer  | String | 必填，资产发行账户地址      |
+---------+--------+-----------------------------+

``getInfo-Asset`` 接口响应数据 asset 数组元素为 Object类型，其中包含如下属性：

+--------+---------+--------------------------------------------------+
| 参数   | 类型    | 描述                                             |
+========+=========+==================================================+
| key    | Object  | 包含属性: code资产编码、issuer资产发行账户地址   |
+--------+---------+--------------------------------------------------+
| amount | String  | 账户资产数量                                     |
+--------+---------+--------------------------------------------------+ 

交易服务
--------

交易服务主要是交易相关的接口，目前有5个接口：``buildBlob``、``evaluateFee``、
``sign``、``submit``、``getInfo-transaction``。

buildBlob
~~~~~~~~~

``buildBlob`` 接口用于序列化交易，生成交易 blob 串，便于网络传输。在调用 buildBlob 接口之前需要构建一些操作对象，参见 `操作说明`_。

调用方法如下：

::

 sdk.transaction.buildBlob(args)

响应数据如下表：

+-----------------+--------+-----------------------------------+
| 参数            | 类型   | 描述                              |
+=================+========+===================================+
| transactionBlob | String | Transaction序列化后的16进制字符串 |
+-----------------+--------+-----------------------------------+

错误码如下表：
+-------------------------+------------+------------------+ 
| 异常                    | 错误码     | 描述             | 
+=========================+============+==================+ 
| INVALID_SOURCEADDRESS   | 11002      | Invalid          |  
| _ERROR                  |            | sourceAddress    | 
+-------------------------+------------+------------------+ 
| INVALID_NONCE_ERROR     | 11048      | Nonce must be    | 
|                         |            | between 1 and    | 
|                         |            | max(int64)       | 
+-------------------------+------------+------------------+ 
| INVALID_GASPRICE        | 11049      | GasPrice must be | 
| _ERROR                  |            | between 1 and    | 
|                         |            | max(int64)       | 
+-------------------------+------------+------------------+ 
| INVALID_FEELIMIT_ERROR  | 11050      | FeeLimit must be | 
|                         |            | between 1 and    | 
|                         |            | max(int64)       | 
+-------------------------+------------+------------------+ 
| OPERATIONS_EMPTY_ERROR  | 11051      | Operations       | 
|                         |            | cannot be empty  | 
+-------------------------+------------+------------------+ 
| INVALID_CEILLEDGERSEQ   | 11052      | CeilLedgerSeq    | 
| _ERROR                  |            | must be equal or | 
|                         |            | greater than 0   | 
+-------------------------+------------+------------------+ 
| INVALID_METADATA_ERROR  | 11053      | Invalid metadata | 
+-------------------------+------------+------------------+  
| SYSTEM_ERROR            | 20000      | System error     | 
+-------------------------+------------+------------------+  


具体示例如下所示：

::

 const args = {
  sourceAddress,
  gasPrice,
  feeLimit,
  nonce,
  operations: [ sendBuOperation ],
  metadata: '6f68206d79207478',
 };
 const blobInfo = sdk.transaction.buildBlob(args);

接口对象类型参考
^^^^^^^^^^^^^^^

``buildBlob`` 接口请求参数 args 为 Object 类型, 其中包含如下属性:

+-----------------------+-----------+---------------------------------+
| 参数                  | 类型      | 描述                            |
+=======================+===========+=================================+
| sourceAddress         | String    | 必填，操作源账户                |
+-----------------------+-----------+---------------------------------+
| nonce                 | String    | 必填，交易序列号                |
+-----------------------+-----------+---------------------------------+
| gasPrice              | String    | 必填，打包费用 (单位是MO)       |
+-----------------------+-----------+---------------------------------+
| feeLimit              | String    | 必填，交易费用 (单位是MO)       |
+-----------------------+-----------+---------------------------------+
| operations            | Array     | 必填，操作                      |
+-----------------------+-----------+---------------------------------+
| ceilLedgerSeq         | String    | 选填，区块高度限制              |       
+-----------------------+-----------+---------------------------------+
| metadata              | String    | 选填，备注                      |
+-----------------------+-----------+---------------------------------+

.. note:: gasPrice、feeLimit、nonce、ceilLedgerSeq 的值只能是包含数字的字符串且不能以0开头。

操作说明
^^^^^^^^

在调用 ``buildBlob`` 接口之前需要构建一些操作对象，
包括：`激活账户`_、`设置账户metadata消息`_、`设置账户权限`_、`发送BU`_、`发布资产`_、`转移资产`_、`创建合约`_、`（资产转移并）触发合约`_、
`（BU资产的发送和）触发合约`_、`在区块链上写日志信息`_。

激活账户
++++++++

激活账户操作接口调用方式：

::

 sdk.operation.accountActivateOperation(args)

**参数说明**

args 为 Object 类型，其中包含如下属性：


+---------------+--------+------------------------------------------------+
| 成员变量      | 类型   | 描述                                           |
+===============+========+================================================+
| sourceAddress | String | 选填，操作源账户                               |
+---------------+--------+------------------------------------------------+
| destAddress   | String | 必填，目标账户地址                             |
+---------------+--------+------------------------------------------------+
| initBalance   | String | 必填，初始化资产，其值只能是包含数字的字符     |
|               |        | 串且不能以0开头，大小[1, max(int64)]，单位是 MO|
+---------------+--------+------------------------------------------------+
| metadata      | String | 选填，备注                                     |
+---------------+--------+------------------------------------------------+

.. note:: 1 BU=10^8 MO。

**返回值**

+---------------+--------+----------------------------------+
| 成员变量      | 类型   | 描述                             |
+===============+========+==================================+
| operation     | Object | 激活账户操作对象                 |
+---------------+--------+----------------------------------+

**错误码**

+---------------------------------------------+--------+----------------------------------------------+
| 异常                                        | 错误码 | 描述                                         |
+=============================================+========+==============================================+
| INVALID_SOURCEADDRESS_ERROR                 | 11002  | Invalid sourceAddress                        |
+---------------------------------------------+--------+----------------------------------------------+
| INVALID_DESTADDRESS_ERROR                   | 11003  | Invalid destAddress                          |
+---------------------------------------------+--------+----------------------------------------------+
| INVALID_INITBALANCE_ERROR                   | 11004  | InitBalance must be between 1 and max(int64) |
+---------------------------------------------+--------+----------------------------------------------+ 
| SOURCEADDRESS_EQUAL_DESTADDRESS_ERROR       | 11005  | SourceAddress cannot be equal to destAddress |                    
+---------------------------------------------+--------+----------------------------------------------+
| INVALID_METADATA_ERROR                      | 15028  | Invalid metadata                             |
+---------------------------------------------+--------+----------------------------------------------+
| SYSTEM_ERROR                                | 20000  | System error                                 |      
+---------------------------------------------+--------+----------------------------------------------+



设置账户metadata消息
++++++++++++++++++++++

设置账户 metadata 消息操作接口调用方式：

::

 sdk.operation.accountSetMetadataOperation(args)

**参数说明**

args 为 Object 类型，其中包含如下属性:

+---------------+--------+---------------------------------------+
| 成员变量      | 类型   | 描述                                  |
+===============+========+=======================================+
| sourceAddress | String | 选填，操作源账户                      |
+---------------+--------+---------------------------------------+
| key           | String | 必填，metadata的关键词，长度[1, 1024] |
+---------------+--------+---------------------------------------+
| value         | String | 选填，metadata的内容，长度[0, 256K]   |
+---------------+--------+---------------------------------------+
| version       | String | 选填，metadata的版本                  |
+---------------+--------+---------------------------------------+
| deleteFlag    | Boolean| 选填，是否删除metadata                |
+---------------+--------+---------------------------------------+
| metadata      | String | 选填，备注                            |
+---------------+--------+---------------------------------------+

**返回值**

+---------------+--------+----------------------------------+
| 成员变量      | 类型   | 描述                             |
+===============+========+==================================+
| operation     | Object | 操作对象                         |
+---------------+--------+----------------------------------+

**错误码**

+---------------------------------------------+--------+---------------------------------------------------+
| 异常                                        | 错误码 | 描述                                              |
+=============================================+========+===================================================+
| INVALID_SOURCEADDRESS_ERROR                 | 11002  | Invalid sourceAddress                             |
+---------------------------------------------+--------+---------------------------------------------------+
| INVALID_DATAKEY_ERROR                       | 11011  | The length of key must be between 1 and 1024      |
+---------------------------------------------+--------+---------------------------------------------------+
| INVALID_DATAVALUE_ERROR                     | 11012  | The length of value must be between 0 and 256000  |
+---------------------------------------------+--------+---------------------------------------------------+ 
| INVALID_DATAVERSION_ERROR                   | 11013  | The version must be equal to or greater than 0    |                    
+---------------------------------------------+--------+---------------------------------------------------+
| SYSTEM_ERROR                                | 20000  | System error                                      |      
+---------------------------------------------+--------+---------------------------------------------------+




设置账户权限
++++++++++++

设置账户权限操作接口调用方式：

::

 sdk.operation.accountSetPrivilegeOperation(args)

**参数说明**

args 为 Object 类型，其中包含如下属性:

+-----------------------+-----------------------+-----------------------+
| 成员变量              | 类型                  | 描述                  |
+=======================+=======================+=======================+
| sourceAddress         | String                | 选填，操作源账户      |
+-----------------------+-----------------------+-----------------------+
| masterWeight          | String                | 选填，账户自身权重，  |
|                       |                       | 大小[0, max(uint32)]  |
+-----------------------+-----------------------+-----------------------+
| signers               | Array                 | 选填，签名者权重列表  |
+-----------------------+-----------------------+-----------------------+
| txThreshold           | String                | 选填，交易门限，      |
|                       |                       | 大小[0,max(int64)]    |
+-----------------------+-----------------------+-----------------------+
| typeThreshold         | Array                 | 选填，指定类型交易门限|
+-----------------------+-----------------------+-----------------------+
| metadata              | String                | 选填，备注            |
+-----------------------+-----------------------+-----------------------+  

**返回值**

+---------------+--------+----------------------------------+
| 成员变量      | 类型   | 描述                             |
+===============+========+==================================+
| operation     | Object | 操作对象                         |
+---------------+--------+----------------------------------+

**错误码**

+---------------------------------------------+--------+---------------------------------------------------+
| 异常                                        | 错误码 | 描述                                              |
+=============================================+========+===================================================+
| INVALID_SOURCEADDRESS_ERROR                 | 11002  | Invalid sourceAddress                             |
+---------------------------------------------+--------+---------------------------------------------------+
| INVALID_MASTERWEIGHT_ERROR                  | 11015  | MasterWeight must be between 0 and max(uint32)    |
+---------------------------------------------+--------+---------------------------------------------------+
| INVALID_SIGNER_ADDRESS_ERROR                | 11016  | Invalid signer address                            |
+---------------------------------------------+--------+---------------------------------------------------+ 
| INVALID_SIGNER_WEIGHT_ERROR                 | 11017  | Signer weight must be between 0 and max(uint32)   |                    
+---------------------------------------------+--------+---------------------------------------------------+
| INVALID_TX_THRESHOLD_ERROR                  | 11018  | TxThreshold must be between 0 and max(int64)      |  
+---------------------------------------------+--------+---------------------------------------------------+
| INVALID_OPERATION_TYPE_ERROR                | 11019  | The type of typeThreshold is invalid              |
+---------------------------------------------+--------+---------------------------------------------------+ 
| INVALID_TYPE_THRESHOLD_ERROR                | 11020  | TypeThreshold must be between 0 and max(int64)    |                    
+---------------------------------------------+--------+---------------------------------------------------+
| SYSTEM_ERROR                                | 20000  | System error                                      |      
+---------------------------------------------+--------+---------------------------------------------------+


**接口对象类型参考**

参数说明列表中成员 signers 的元素为 Object 类型，其属性包括：

+---------------+--------+------------------------------------------+
| 成员变量      | 类型   | 描述                                     |
+===============+========+==========================================+
| address       | String | 选填，签名账户地址                       |
+---------------+--------+------------------------------------------+
| weight        | String | 选填，签名账户权重，大小[0, max(uint32)] |
+---------------+--------+------------------------------------------+

参数说明列表中成员 typeThresholds 的元素为 Object 类型，其属性包括：

+---------------+--------+------------------------------------------+
| 成员变量      | 类型   | 描述                                     |
+===============+========+==========================================+
| type          | String | 选填，操作类型，大小[1, 100]             |
+---------------+--------+------------------------------------------+
| threshold     | String | 选填，门限，大小[0, max(int64)]          |
+---------------+--------+------------------------------------------+



发送BU
++++++

发送BU操作接口调用方式：

::

 sdk.operation.buSendOperation(args)

**参数说明**

args 为 Object 类型，其中包含如下属性:

+---------------+--------+------------------------------------------------+
| 成员变量      | 类型   | 描述                                           |
+===============+========+================================================+
| sourceAddress | String | 选填，操作源账户                               |
+---------------+--------+------------------------------------------------+
| metadata      | String | 选填，备注                                     |
+---------------+--------+------------------------------------------------+
| destAddress   | String | 必填，目标账户地址                             |
+---------------+--------+------------------------------------------------+
| buAmount      | String | 必填，初始化资产，其值只能是包含数字的字符串   |                        
|               |        | 且不能以0开头, 值范围[1, max(int64)] (单位是MO)|
+---------------+--------+------------------------------------------------+

**返回值**

+---------------+--------+----------------------------------+
| 成员变量      | 类型   | 描述                             |
+===============+========+==================================+
| operation     | Object | 发送BU操作对象                   |
+---------------+--------+----------------------------------+

**错误码**

+---------------------------------------------+--------+---------------------------------------------------+
| 异常                                        | 错误码 | 描述                                              |
+=============================================+========+===================================================+
| INVALID_SOURCEADDRESS_ERROR                 | 11002  | Invalid sourceAddress                             |
+---------------------------------------------+--------+---------------------------------------------------+
| INVALID_DESTADDRESS_ERROR                   | 11003  | Invalid destAddress                               |
+---------------------------------------------+--------+---------------------------------------------------+
| SOURCEADDRESS_EQUAL_DESTADDRESS_ERROR       | 11005  | SourceAddress cannot be equal to destAddress      |
+---------------------------------------------+--------+---------------------------------------------------+ 
| INVALID_BU_AMOUNT_ERROR                     | 11026  | BuAmount must be between 1 and max(int64)         |                    
+---------------------------------------------+--------+---------------------------------------------------+
| INVALID_ISSUER_ADDRESS_ERROR                | 11027  | Invalid issuer address                            |  
+---------------------------------------------+--------+---------------------------------------------------+
| SYSTEM_ERROR                                | 20000  | System error                                      |      
+---------------------------------------------+--------+---------------------------------------------------+






发布资产
++++++++


发布资产操作接口调用方式：

::

 sdk.operation.assetIssueOperation(args)

**参数说明**

args 为 Object 类型，其中包含如下属性:

+---------------+--------+------------------------------------------------+
| 成员变量      | 类型   | 描述                                           |
+===============+========+================================================+
| sourceAddress | String | 选填，操作源账户                               |
+---------------+--------+------------------------------------------------+
| metadata      | String | 选填，备注                                     |
+---------------+--------+------------------------------------------------+
| code          | String | 必填，资产编码                                 |
+---------------+--------+------------------------------------------------+
| assetAmount   | String | 必填，资产发布数量，其值只能是包含数字的字符串 |
|               |        | 且不能以0开头, 值范围[1, max(int64)] (单位是MO)| 
+---------------+--------+------------------------------------------------+  

**返回值**

+---------------+--------+----------------------------------+
| 成员变量      | 类型   | 描述                             |
+===============+========+==================================+
| operation     | Object | 发送资产操作对象                 |
+---------------+--------+----------------------------------+

**错误码**

+---------------------------------------------+--------+---------------------------------------------------+
| 异常                                        | 错误码 | 描述                                              |
+=============================================+========+===================================================+
| INVALID_SOURCEADDRESS_ERROR                 | 11002  | Invalid sourceAddress                             |
+---------------------------------------------+--------+---------------------------------------------------+
| INVALID_ASSET_CODE_ERROR                    | 11023  | The length of key must be between 1 and 1024      |                    
+---------------------------------------------+--------+---------------------------------------------------+
| INVALID_ASSET_AMOUNT_ERROR                  | 11024  | AssetAmount must be between 1 and max(int64)      |
+---------------------------------------------+--------+---------------------------------------------------+ 
| SYSTEM_ERROR                                | 20000  | System error                                      |                    
+---------------------------------------------+--------+---------------------------------------------------+




转移资产
++++++++

转移资产操作接口调用方式：

::

 sdk.operation.assetSendOperation(args)

**参数说明**

args 为 Object 类型，其中包含如下属性:

+---------------+--------+-------------------------------------------------+
| 成员变量      | 类型   | 描述                                            |
+===============+========+=================================================+
| sourceAddress | String | 选填，发起该操作的源账户地址                    |
+---------------+--------+-------------------------------------------------+
| metadata      | String | 选填，备注                                      |
+---------------+--------+-------------------------------------------------+
| destAddress   | String | 必填，目标账户地址                              |
+---------------+--------+-------------------------------------------------+
| code          | String | 必填，资产编码                                  |
+---------------+--------+-------------------------------------------------+
| issuer        | String4| 必填，必填，资产发行账户地址                    |
+---------------+--------+-------------------------------------------------+
| assetAmount   | String | 必填，资产转移数量，其值只能是包含数字的字符串  |                        
|               |        | 且不能以0开头, 值范围[1, max(int64)] (单位是MO) |
+---------------+--------+-------------------------------------------------+    

**返回值**

+---------------+--------+----------------------------------+
| 成员变量      | 类型   | 描述                             |
+===============+========+==================================+
| operation     | Object | 转移资产操作对象                 |
+---------------+--------+----------------------------------+

**错误码**

+---------------------------------------------+--------+----------------------------------------------------+
| 异常                                        | 错误码 | 描述                                               |
+=============================================+========+====================================================+
| INVALID_SOURCEADDRESS_ERROR                 | 11002  | Invalid sourceAddress                              |
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_DESTADDRESS_ERROR                   | 11003  | Invalid destAddress                                |
+---------------------------------------------+--------+----------------------------------------------------+
| SOURCEADDRESS_EQUAL_DESTADDRESS_ERROR       | 11005  | SourceAddress cannot be equal to destAddress       |
+---------------------------------------------+--------+----------------------------------------------------+ 
| INVALID_ASSET_CODE_ERROR                    | 11023  | The length of asset code must be between 1 and 1024|                    
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_ASSET_AMOUNT_ERROR                  | 11024  | AssetAmount must be between 1 and max(int64)       |                      
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_ISSUER_ADDRESS_ERROR                | 11027  | Invalid issuer address                             |     
+---------------------------------------------+--------+----------------------------------------------------+
| SYSTEM_ERROR                                | 20000  | System error                                       |      
+---------------------------------------------+--------+----------------------------------------------------+




创建合约
++++++++

创建合约操作接口调用方式：

::

 sdk.operation.contractCreateOperation(args)

**参数说明**

args 为 Object 类型，其中包含如下属性:

+---------------+--------+---------------------------------------------------+
| 成员变量      | 类型   | 描述                                              |
+===============+========+===================================================+
| initBalance   | String | 必填，给合约账户的初始化资产，大小[1, max(int64)] |
+---------------+--------+---------------------------------------------------+
| payload       | String | 必填，合约代码                                    |
+---------------+--------+---------------------------------------------------+
| sourceAddress | String | 选填，操作源账户                                  |
+---------------+--------+---------------------------------------------------+
| metadata      | String | 选填，备注                                        |
+---------------+--------+---------------------------------------------------+  

**返回值**

+---------------+--------+----------------------------------+
| 成员变量      | 类型   | 描述                             |
+===============+========+==================================+
| operation     | Object | 合约创建操作对象                 |
+---------------+--------+----------------------------------+

**错误码**

+---------------------------------------------+--------+----------------------------------------------------+
| 异常                                        | 错误码 | 描述                                               |
+=============================================+========+====================================================+
| INVALID_SOURCEADDRESS_ERROR                 | 11002  | Invalid sourceAddress                              |
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_INITBALANCE_ERROR                   | 11004  | InitBalance must be between 1 and max(int64)       |    
+---------------------------------------------+--------+----------------------------------------------------+
| PAYLOAD_EMPTY_ERROR                         | 11044  | Payload must be a non-empty string                 |
+---------------------------------------------+--------+----------------------------------------------------+ 
| SYSTEM_ERROR                                | 20000  | System error                                       |      
+---------------------------------------------+--------+----------------------------------------------------+






（资产转移并）触发合约
++++++++++++++++++++++

（资产转移并）触发合约操作为 Promise，接口调用方式为：

::

 sdk.operation.contractInvokeByAssetOperation(args)

**参数说明**

args 为 Object 类型，其中包含如下属性:

+-----------------+--------+---------------------------------------------------------+
| 成员变量        | 类型   | 描述                                                    |
+=================+========+=========================================================+
| contractAddress | String | 必填，合约账户地址                                      |
+-----------------+--------+---------------------------------------------------------+
| sourceAddress   | String | 选填，发起该操作的源账户地址                            |
+-----------------+--------+---------------------------------------------------------+
| code            | String | 选填，资产编码，长度[0,1024]，当为null时，仅触发合约    |
+-----------------+--------+---------------------------------------------------------+
| issuer          | String | 选填，资产发行账户地址，当为null时，仅触发合约          |
+-----------------+--------+---------------------------------------------------------+
| assetAmount     | String | 选填，资产数量，大小[0,max(int64)]，当是0时，仅触发合约 |
+-----------------+--------+---------------------------------------------------------+
| input           | String | 选填，待触发的合约的main()入参                          |
+-----------------+--------+---------------------------------------------------------+
| metadata        | String | 选填，备注                                              |
+-----------------+--------+---------------------------------------------------------+

**返回值**

+---------------+--------+----------------------------------+
| 成员变量      | 类型   | 描述                             |
+===============+========+==================================+
| operation     | Object | 资产转移并触发合约操作对象       |
+---------------+--------+----------------------------------+

**错误码**


+---------------------------------------------+--------+----------------------------------------------------+
| 异常                                        | 错误码 | 描述                                               |
+=============================================+========+====================================================+
| INVALID_SOURCEADDRESS_ERROR                 | 11002  | Invalid sourceAddress                              |
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_CONTRACTADDRESS_ERROR               | 11037  | Invalid contract address                           |    
+---------------------------------------------+--------+----------------------------------------------------+
| CONTRACTADDRESS_NOT_CONTRACTACCOUNT_ERROR   | 11038  | ContractAddress is not a contract account          |
+---------------------------------------------+--------+----------------------------------------------------+ 
| SOURCEADDRESS_EQUAL_CONTRACTADDRESS_ERROR   | 11040  | SourceAddress cannot be equal to contractAddress   |
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_ASSET_CODE_ERROR                    | 11023  | The length of asset code must be between 0 and 1024|    
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_CONTRACT_ASSET_AMOUNT_ERROR         | 15031  | AssetAmount must be between 0 and max(int64)       |
+---------------------------------------------+--------+----------------------------------------------------+ 
| INVALID_ISSUER_ADDRESS_ERROR                | 11027  | Invalid issuer address                             |
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_INPUT_ERROR                         | 15028  | Invalid input                                      |    
+---------------------------------------------+--------+----------------------------------------------------+
| SYSTEM_ERROR                                | 20000  | System error                                       |      
+---------------------------------------------+--------+----------------------------------------------------+







（BU资产的发送和）触发合约
+++++++++++++++++++++++++

（BU资产的发送和）触发合约操作为Promise，该操作接口调用方式：

::

 sdk.operation.contractInvokeByBUOperation(args)

**参数说明**

args 为 Object 类型，其中包含如下属性:

+-----------------------+-----------------------+------------------------------------+
| 成员变量              | 类型                  | 描述                               |
+=======================+=======================+====================================+
| contractAddress       | String                | 必填，合约账户地址                 |
+-----------------------+-----------------------+------------------------------------+
| sourceAddress         | String                | 选填，发起该操作的源账户地址       |
+-----------------------+-----------------------+------------------------------------+
| buAmount              | String                | 选填，资产发行数量，大小           |
|                       |                       | [0, max(int64)]，当为0时仅触发合约 |
+-----------------------+-----------------------+------------------------------------+
| input                 | String                | 选填，待触发的合约的main()入参     |
+-----------------------+-----------------------+------------------------------------+
| metadata              | String                | 选填，备注                         |
+-----------------------+-----------------------+------------------------------------+

**返回值**

+---------------+--------+----------------------------------+
| 成员变量      | 类型   | 描述                             |
+===============+========+==================================+
| operation     | Object | BU资产的发送和触发合约操作对象   |
+---------------+--------+----------------------------------+

**错误码**

+---------------------------------------------+--------+----------------------------------------------------+
| 异常                                        | 错误码 | 描述                                               |
+=============================================+========+====================================================+
| INVALID_SOURCEADDRESS_ERROR                 | 11002  | Invalid sourceAddress                              |
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_CONTRACTADDRESS_ERROR               | 11037  | Invalid contract address                           |    
+---------------------------------------------+--------+----------------------------------------------------+
| CONTRACTADDRESS_NOT_CONTRACTACCOUNT_ERROR   | 11038  | ContractAddress is not a contract account          |
+---------------------------------------------+--------+----------------------------------------------------+ 
| SOURCEADDRESS_EQUAL_CONTRACTADDRESS_ERROR   | 11040  | SourceAddress cannot be equal to contractAddress   |
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_CONTRACT_BU_AMOUNT_ERROR            | 15030  | BuAmount must be between 0 and max(int64)          |    
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_INPUT_ERROR                         | 15028  | Invalid input                                      |    
+---------------------------------------------+--------+----------------------------------------------------+
| SYSTEM_ERROR                                | 20000  | System error                                       |      
+---------------------------------------------+--------+----------------------------------------------------+






在区块链上写日志信息
+++++++++++++++++++

在区块链上写日志信息操作接口调用方式：

::

 sdk.operation.logCreateOperation(args)

**参数说明**

args 为 Object 类型，其中包含如下属性:

+---------------+----------+-----------------------------------------+
| 成员变量      | 类型     | 描述                                    |
+===============+==========+=========================================+
| sourceAddress | String   | 选填，发起该操作的源账户地址            |
+---------------+----------+-----------------------------------------+
| topic         | String   | 必填，日志主题，长度[1, 128]            |
+---------------+----------+-----------------------------------------+
| data          | String   | 必填，日志内容，每个字符串长度[1, 1024] |
+---------------+----------+-----------------------------------------+
| metadata      | String   | 选填，备注                              |
+---------------+----------+-----------------------------------------+




**返回值**

+---------------+--------+----------------------------------+
| 成员变量      | 类型   | 描述                             |
+===============+========+==================================+
| operation     | Object | 在区块链上写日志信息的操作对象   |
+---------------+--------+----------------------------------+


**错误码**

+---------------------------------------------+--------+----------------------------------------------------+
| 异常                                        | 错误码 | 描述                                               |
+=============================================+========+====================================================+
| INVALID_SOURCEADDRESS_ERROR                 | 11002  | Invalid sourceAddress                              |
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_LOG_TOPIC_ERROR                     | 11045  | The length of key must be between 1 and 128        |    
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_LOG_DATA_ERROR                      | 11046  | The length of value must be between 1 and 1024     |                 
+---------------------------------------------+--------+----------------------------------------------------+
| SYSTEM_ERROR                                | 20000  | System error                                       |      
+---------------------------------------------+--------+----------------------------------------------------+








evaluateFee
~~~~~~~~~~~~

``evaluateFee`` 接口用来评估交易费用。

调用方法如下:

::

 sdk.transaction.evaluateFee(args)

响应数据如下表：

+----------+-------+----------+
| 成员变量 | 类型  | 描述     |
+==========+=======+==========+
| feeLimit | String| 交易费用 |
+----------+-------+----------+
| gasPrice | String| 打包费用 |
+----------+-------+----------+

错误码如下表：

+-------------------------+----------+----------------------------+
| 异常                    | 错误码   | 描述                       |
+=========================+==========+============================+
| INVALID_NONCE_ERROR     | 11048    | Nonce must be              |
|                         |          | between 1 and              |
|                         |          | max(int64)                 |
+-------------------------+----------+----------------------------+
| INVALID_ARGUMENTS       | 15016    | Arguments of the function  |
|                         |          | are invalid                |
+-------------------------+----------+----------------------------+
| SYSTEM_ERROR            | 20000    | System error               |
+-------------------------+----------+----------------------------+ 

具体示例如下所示:

::

  const args = {
	sourceAddress: 'buQswSaKDACkrFsnP1wcVsLAUzXQsemauEjf',
	nonce: '101',
	operations: [sendBuOperation],
	signtureNumber: '1',
	metadata: '54657374206576616c756174696f6e20666565',
 };

 sdk.transaction.evaluateFee(args).then(data => {
  console.log(data);
 });


接口对象类型参考
^^^^^^^^^^^^^^^

``evaluateFee`` 接口请求参数 args 为 Object 类型，其中包含如下属性：

+-----------------------+---------------------+---------------------------------+
| 参数                  | 类型                | 描述                            |
+=======================+=====================+=================================+
| sourceAddress         | String              | 必填，发起该操作的源账户地址    |
+-----------------------+---------------------+---------------------------------+
| nonce                 | String              | 必填，待发起的交易序列号        |
+-----------------------+---------------------+---------------------------------+
| operations            | Array               | 必填，待提交的操作列表          |
+-----------------------+---------------------+---------------------------------+
| signatureNumber       | String              | 选填，待签名者的数量，默认是1   |
+-----------------------+---------------------+---------------------------------+
| metadata              | String              | 选填，备注                      |
+-----------------------+---------------------+---------------------------------+


sign
~~~~~


``sign`` 接口用于实现交易的签名。

调用方法如下：

::

 sdk.transaction.sign(args)

响应数据如下表：

+------------+------------------+------------------+
| 参数       | 类型             | 描述             |
+============+==================+==================+
| signatures | Array            | 签名后的数据列表 |
+------------+------------------+------------------+

错误码如下表：

+------------------------+--------+---------------------------------------+
| 异常                   | 错误码 | 描述                                  |
+========================+========+=======================================+
| INVALID_BLOB_ERROR     | 11056  | Invalid blob                          |
+------------------------+--------+---------------------------------------+
| PRIVATEKEY_ONE_ERROR   | 11058  | One of privateKeys is invalid         |
+------------------------+--------+---------------------------------------+
| SYSTEM_ERROR           | 20000  | System error                          |
+------------------------+--------+---------------------------------------+

具体示例如下所示:

::

 const signatureInfo = sdk.transaction.sign({
	privateKeys: [ privateKey ],
	blob,
 });

 console.log(signatureInfo);

接口对象类型参考
^^^^^^^^^^^^^^^

``sign`` 接口请求参数 args 为 Object, 包含如下属性:

+-------------+-----------+------------------------+
| 参数        | 类型      | 描述                   |
+=============+===========+========================+
| blob        | String    | 必填，待签名的交易Blob |
+-------------+-----------+------------------------+
| privateKeys | Array     | 必填，私钥列表         |
+-------------+-----------+------------------------+

``sign`` 接口响应数据 signatures 元素为 Object 对象, 其中包含如下属性：

+-----------+-------+-------------------+
| 成员变量  | 类型  | 描述              |
+===========+=======+===================+
| signData  | String| 签名后的数据列表  |
+-----------+-------+-------------------+
| publicKey | String| 公钥              |
+-----------+-------+-------------------+

submit
~~~~~~~

``submit`` 接口用于提交交易。

调用方法如下：

::

 sdk.transaction.submit(args)

响应数据如下表：

+------+--------+----------+
| 参数 | 类型   | 描述     |
+======+========+==========+
| hash | String | 交易hash |
+------+--------+----------+

错误码如下表：

+--------------------------+--------+--------------------+
| 异常                     | 错误码 | 描述               |
+==========================+========+====================+
| INVALID_BLOB_ERROR       | 11056  | Invalid blob       |
+--------------------------+--------+--------------------+
| INVALID_SIGNATURE_ERROR  | 15027  | Invalid signature  |
+--------------------------+--------+--------------------+              
| SYSTEM_ERROR             | 20000  | System error       |
+--------------------------+--------+--------------------+

具体示例如下所示：

::

   let transactionInfo = yield sdk.transaction.submit({
    blob: blob,
    signature: signature,
  });
 

接口对象类型参考
^^^^^^^^^^^^^^^

``submit`` 接口请求参数 args 为 Object 类型, 包含如下属性：

+-----------+-------------------+----------------+
| 参数      | 类型              | 描述           |
+===========+===================+================+
| blob      | String            | 必填，交易blob |
+-----------+-------------------+----------------+
| signature | Array             | 必填，签名列表 |
+-----------+-------------------+----------------+


区块服务
------------

区块服务主要是区块相关的接口，目前有：``getNumber``、``checkStatus``、``getTransactions``、
``getInfo-block``、``getLatestInfo``、``getValidators``、``getLatestValidators``、``getReward``、
``getLatestReward``、``getFees``、``getLatestFees``。

getNumber
~~~~~~~~~~

``GetNumber`` 接口用于查询最新的区块高度。

调用方法如下：

::

 sdk.block.getNumber()

响应数据如下表：

+-------------+-------+---------------------------------+
| 参数        | 类型  | 描述                            |
+=============+=======+=================================+
| header      | Object| 区块头                          |
+-------------+-------+---------------------------------+
| BlockNumber | String| 最新的区块高度                  |
+-------------+-------+---------------------------------+

错误码如下表：

+----------------------+--------+-------------------------+
| 异常                 | 错误码 | 描述                    |
+======================+========+=========================+
| SYSTEM_ERROR         | 20000  | System error            |
+----------------------+--------+-------------------------+

具体示例如下所示：

::

 sdk.block.getNumber().then((result) => {
  console.log(result);
 }).catch((err) => {
  console.log(err.message);
 });

checkStatus
~~~~~~~~~~~~

``checkStatus`` 接口用于检查本地节点区块是否同步完成。

调用方法如下：

::

 sdk.block.checkStatus()

响应数据如下表：

+---------------+------+--------------+
| 参数          | 类型 | 描述         |
+===============+======+==============+
| isSynchronous | bool | 区块是否同步 |
+---------------+------+--------------+

错误码如下表：

+----------------------+--------+-------------------------+
| 异常                 | 错误码 | 描述                    |
+======================+========+=========================+
| SYSTEM_ERROR         | 20000  | System error            |
+----------------------+--------+-------------------------+

具体示例如下所示：

::

 sdk.block.checkStatus().then((result) => {
  console.log(result);
 }).catch((err) => {
  console.log(err.message);
 });

getTransactions
~~~~~~~~~~~~~~~~

``getTransactions`` 接口用于查询指定区块高度下的所有交易。

调用方法如下：

::

 sdk.block.getTransactions(blockNumber)

请求参数如下表：

+-------------+-------+------------------------+
| 参数        | 类型  | 描述                   |
+=============+=======+========================+
| blockNumber | String| 待查询的区块高度       |
+-------------+-------+------------------------+

响应数据如下表:

+-----------------------+------------------------------+-----------------+
| 参数                  | 类型                         | 描述            |
+=======================+==============================+=================+
| total_count           | String                       | 返回的总交易数  |
+-----------------------+------------------------------+-----------------+
| transactions          | Array                        | 交易内容        |
+-----------------------+------------------------------+-----------------+


错误码如下表：

+--------------------------+--------+--------------------------------------+
| 异常                     | 错误码 | 描述                                 |
+==========================+========+======================================+
| INVALID_BLOCKNUMBER_ERROR| 11060  | BlockNumber must be bigger than 0    |
+--------------------------+--------+--------------------------------------+
| QUERY_RESULT_NOT_EXIST   | 15014  | Query result not exist               |
+--------------------------+--------+--------------------------------------+
| SYSTEM_ERROR             | 20000  | System error                         |
+--------------------------+--------+--------------------------------------+

具体示例如下所示：

::

 sdk.block.getTransactions(100).then(result => {
  console.log(result);
  console.log(JSON.stringify(result));
 }).catch(err => {
  console.log(err.message);
 });



接口对象类型参考
^^^^^^^^^^^^^^^


transactions
+++++++++++++

+----------------+-------------------------+-----------------------+
| 成员           | 类型                    | 描述                  |
+================+=========================+=======================+
| actual_fee     | String                  | 交易实际费用          |
+----------------+-------------------------+-----------------------+
| close_time     | String                  | 交易关闭时间          |
+----------------+-------------------------+-----------------------+
| error_code     | String                  | 交易错误码            |
+----------------+-------------------------+-----------------------+
| error_desc     | String                  | 交易描述              |
+----------------+-------------------------+-----------------------+
|  hash          | String                  | 交易hash              |
+----------------+-------------------------+-----------------------+
| ledger_seq     | String                  | 区块序列号            |
+----------------+-------------------------+-----------------------+
|  transaction   | TransactionInfo Object  | 交易内容列表          |
+----------------+-------------------------+-----------------------+
| signatures     | Signature Object        | 签名列表              |
+----------------+-------------------------+-----------------------+
| tx_size        | int64                   | 交易大小              |
+----------------+-------------------------+-----------------------+ 

transactionInfoObject
++++++++++++++++++++++++++

+----------------+-------------------------+-----------------------+
| 成员           | 类型                    | 描述                  |
+================+=========================+=======================+
| source_address | String                  | 交易发起的源账户地址  |
+----------------+-------------------------+-----------------------+
| fee_limit      | String                  | 交易费用              |
+----------------+-------------------------+-----------------------+
| gas_price      | String                  | 交易打包费用          |
+----------------+-------------------------+-----------------------+
| nonce          | String                  | 交易序列号            |
+----------------+-------------------------+-----------------------+
|  operations    | Object                  | 操作列表              |
+----------------+-------------------------+-----------------------+


signatureObject
++++++++++++++++++

+----------------+-------------------------+-----------------------+
| 成员           | 类型                    | 描述                  |
+================+=========================+=======================+
| sign_data      | String                  | 签名后数据            |
+----------------+-------------------------+-----------------------+
| public_key     | String                  | 公钥                  |
+----------------+-------------------------+-----------------------+
  

getInfo-block
~~~~~~~~~~~~~


``getInfo-block`` 接口用于获取区块信息。

调用方法如下：

::

 sdk.block.getInfo(blockNumber)

请求参数如下表：

+-------------+-------+------------------+
| 参数        | 类型  | 描述             |
+=============+=======+==================+
| blockNumber | String| 待查询的区块高度 |
+-------------+-------+------------------+

响应数据如下表：

+-----------+--------+--------------+
| 参数      | 类型   | 描述         |
+===========+========+==============+
| closeTime | String | 区块关闭时间|
+-----------+--------+--------------+
| number    | String | 区块高度     |
+-----------+--------+--------------+
| txCount   | String | 交易总量     |
+-----------+--------+--------------+
| version   | String | 区块版本     |
+-----------+--------+--------------+

错误码如下表：

+---------------------------+--------+------------------------------------+
| 异常                      | 错误码 | 描述                               |
+===========================+========+====================================+
| INVALID_BLOCKNUMBER_ERROR | 11060  | BlockNumber must be greater than 0 |
+---------------------------+--------+------------------------------------+
| SYSTEM_ERROR              | 20000  | System error                       |
+---------------------------+--------+------------------------------------+      

具体示例如下所示:

::

 sdk.block.getInfo(100).then(result => {
  console.log(result);
 }).catch(err => {
  console.log(err.message);
 });


getLatestInfo
~~~~~~~~~~~~~~

``getLatestInfo`` 接口用于获取最新区块信息。

调用方法如下所示:

::

 sdk.block. getLatestInfo()

响应数据如下表:

+-----------+--------+--------------+
| 参数      | 类型   | 描述         |
+===========+========+==============+
| closeTime | String | 区块关闭时间 |
+-----------+--------+--------------+
| number    | String | 区块高度     |
+-----------+--------+--------------+
| txCount   | String | 交易总量     |
+-----------+--------+--------------+
| version   | String | 区块版本     |
+-----------+--------+--------------+

错误码如下表：

+----------------------+--------+-------------------------+
| 异常                 | 错误码 | 描述                    |
+======================+========+=========================+
| SYSTEM_ERROR         | 20000  | System error            |
+----------------------+--------+-------------------------+   

具体示例如下所示：

::

 sdk.block.getLatestInfo().then(result => {
  console.log(result);
 }).catch(err => {
  console.log(err.message);
 });

getValidators
~~~~~~~~~~~~~~~~~~

``getValidators`` 接口用于获取指定区块中所有验证节点数。

调用方法如下:

::

 sdk.block.getValidators(blockNumber)

请求参数如下表：

+-------------+-------+------------------+
| 参数        | 类型  | 描述             |
+=============+=======+==================+
| blockNumber | String| 待查询的区块高度 |
+-------------+-------+------------------+

响应数据如下表:

+------------+----------------------+--------------+
| 参数       | 类型                 | 描述         |
+============+======================+==============+
| validators | Array                | 验证节点列表 |
+------------+----------------------+--------------+

错误码如下表：

+---------------------------+--------+--------------------------+
| 异常                      | 错误码 | 描述                     |
+===========================+========+==========================+
| INVALID_BLOCKNUMBER_ERROR | 11060  | BlockNumber must be      |
|                           |        | greater than 0           |
+---------------------------+--------+--------------------------+
| SYSTEM_ERROR              | 20000  | System error             |
+---------------------------+--------+--------------------------+  

具体示例如下所示:

::

 sdk.block.getValidators(100).then(result => {
  console.log(result);
 }).catch(err => {
  console.log(err.message);
 });

接口对象类型参考
^^^^^^^^^^^^^^^

响应数据中 validators 的元素为 Object 类型，其中包含如下属性：

+--------------------+-------+------------------+
| 参数               | 类型  | 描述             |
+====================+=======+==================+
| address            | String| 共识节点地址     |
+--------------------+-------+------------------+
| pledge_coin_amount | String| 验证节点押金     |
+--------------------+-------+------------------+


getLatestValidators
~~~~~~~~~~~~~~~~~~~~~

``getLatestValidators`` 接口用于获取最新区块中所有验证节点数。

调用方法如下所示:

::

 sdk.block.getLatestValidators()

响应数据如下表:

+------------+-----------------------+--------------+
| 参数       | 类型                  | 描述         |
+============+=======================+==============+
| validators | Array                 | 验证节点列表 |
+------------+-----------------------+--------------+

错误码如下表：

+---------------------------+--------+----------------------------+
| 异常                      | 错误码 | 描述                       |
+===========================+========+============================+
| SYSTEM_ERROR              | 20000  | System error               |
+---------------------------+--------+----------------------------+   

具体示例如下所示:

::

 sdk.block.getLatestValidators().then(result => {
  console.log(result);
 }).catch(err => {
  console.log(err.message);
 });

接口对象类型参考
^^^^^^^^^^^^^^^

响应数据中 validators 的元素为 Object 类型，其中包含如下属性：

+--------------------+-------+------------------+
| 参数               | 类型  | 描述             |
+====================+=======+==================+
| address            | String| 共识节点地址     |
+--------------------+-------+------------------+
| pledge_coin_amount | String| 验证节点押金     |
+--------------------+-------+------------------+

getReward
~~~~~~~~~~

``getReward`` 接口用于获取指定区块中的区块奖励和验证节点奖励。

调用方法如下所示:

::

 sdk.block.getReward(blockNumber)

请求参数如下表：

+-------------+-------+------------------------+
| 参数        | 类型  | 描述                   |
+=============+=======+========================+
| blockNumber | String| 待查询的区块高度       |
+-------------+-------+------------------------+

响应数据如下表：

+-----------------------+-------------------------+-------------------+
| 参数                  | 类型                    | 描述              |
+=======================+=========================+===================+
| blockReward           | String                  | 区块奖励数        |
+-----------------------+-------------------------+-------------------+
| validatorsReward      | Array                   | 验证节点奖励情况  |
+-----------------------+-------------------------+-------------------+


错误码如下表：

+---------------------------+--------+------------------------------------+
| 异常                      | 错误码 | 描述                               |
+===========================+========+====================================+
| INVALID_BLOCKNUMBER_ERROR | 11060  | BlockNumber must be greater than 0 |
+---------------------------+--------+------------------------------------+
| SYSTEM_ERROR              | 20000  | System error                       |
+---------------------------+--------+------------------------------------+  

具体示例如下所示:

::

 sdk.block.getReward(100).then(result => {
  console.log(result);
 }).catch(err => {
  console.log(err.message);
 });


接口对象类型参考
^^^^^^^^^^^^^^^

响应数据中 validatorsReward 的元素为 Object 对象，其中包含如下属性：

+-------------+-------+------------------------+
| 参数        | 类型  | 描述                   |
+=============+=======+========================+
| validator   | String| 验证节点地址           |
+-------------+-------+------------------------+
| reward      | String| 验证节点奖励           |
+-------------+-------+------------------------+


getLatestReward
~~~~~~~~~~~~~~~~

``getLatestReward`` 接口用于获取最新区块中的区块奖励和验证节点奖励。

调用方法如下所示:

::

 sdk.block.getLatestReward()


响应数据如下表:

+-----------------------+-------------------------+-----------------------+
| 参数                  | 类型                    | 描述                  |
+=======================+=========================+=======================+
| blockReward           | String                  | 区块奖励数            |
+-----------------------+-------------------------+-----------------------+
| validatorsReward      | Array                   | 验证节点奖励情况      |
+-----------------------+-------------------------+-----------------------+

错误码如下表：

+----------------------+--------+-------------------------+
| 异常                 | 错误码 | 描述                    |
+======================+========+=========================+
| SYSTEM_ERROR         | 20000  | System error            |
+----------------------+--------+-------------------------+ 

具体示例如下所示:

::

 sdk.block.getLatestReward().then(result => {
  console.log(result);
 }).catch(err => {
  console.log(err.message);
 });

接口对象类型参考
^^^^^^^^^^^^^^^

响应数据中 validatorsReward 的元素为 Object 类型，其中包含如下属性：

+-----------------------+-------------------------+-----------------------+
| 参数                  | 类型                    | 描述                  |
+=======================+=========================+=======================+
| validator             | String                  | 验证节点地址          |
+-----------------------+-------------------------+-----------------------+
| reward                | String                  | 验证节点奖励          |
+-----------------------+-------------------------+-----------------------+

getFees
~~~~~~~~

``getFees`` 接口用于获取指定区块中的账户最低资产限制和打包费用。

调用方法如下所示:

::

 sdk.block.getFees(blockNumber)

请求参数如下表：

+-------------+-------+------------------------+
| 参数        | 类型  | 描述                   |
+=============+=======+========================+
| blockNumber | String| 待查询的区块高度       |
+-------------+-------+------------------------+

响应数据如下表:

+------+------------+------+
| 参数 | 类型       | 描述 |
+======+============+======+
| fees | Object     | 费用 |
+------+------------+------+

错误码如下表：

+---------------------------+--------+--------------------------------+
| 异常                      | 错误码 | 描述                           |
+===========================+========+================================+
| INVALID_BLOCKNUMBER_ERROR | 11060  | BlockNumber must               |
|                           |        | be greater than 0              |
+---------------------------+--------+--------------------------------+
| SYSTEM_ERROR              | 20000  | System error                   |
+---------------------------+--------+--------------------------------+    

具体示例如下所示:

::

 sdk.block.getFees(100).then(result => {
  console.log(result);
 }).catch(err => {
  console.log(err.message);
 });

接口对象类型参考
^^^^^^^^^^^^^^^

响应数据中 fees 的元素为 Object 类型，其中包含如下属性：

+-------------+-------+----------------------------------------+
| 参数        | 类型  | 描述                                   |
+=============+=======+========================================+
| baseReserve | String| 账户最低资产限制                       |
+-------------+-------+----------------------------------------+
| gasPrice    | String| 打包费用，单位MO，1 BU = 10^8 MO       |
+-------------+-------+----------------------------------------+

getLatestFees
~~~~~~~~~~~~~~

``getLatestFees`` 接口用于获取最新区块中的账户最低资产限制和打包费用。

调用方法如下所示:

::

 sdk.block.getLatestFees()

响应数据如下表:

+------+------------------+------+
| 参数 | 类型             | 描述 |
+======+==================+======+
| fees | Object           | 费用 |
+------+------------------+------+

错误码如下表：

+----------------------+--------+-------------------------+
| 异常                 | 错误码 | 描述                    |
+======================+========+=========================+
| SYSTEM_ERROR         | 20000  | System error            |
+----------------------+--------+-------------------------+  

具体示例如下所示:

::

 sdk.block.getLatestFees().then(result => {
  console.log(result);
 }).catch(err => {
  console.log(err.message);
 });




合约服务
--------

合约服务主要是合约相关的接口，目前有 ``getInfo-contract``、``checkValid-contract``、``getAddress-contract``。


getInfo-contract
~~~~~~~~~~~~~~~~~

``getInfo-contract``  接口用于查询合约代码。

调用方法如下所示:

::

 sdk.contract.getInfo(contractAddress)

请求参数如下表：

+-----------------+------------------+--------------+
| 参数            | 类型             | 描述         |
+=================+==================+==============+
| contractAddress | String           | 合约账户地址 |
+-----------------+------------------+--------------+

响应数据如下表：

+-----------------+------------------+--------------+
| 参数            | 类型             | 描述         |
+=================+==================+==============+
| contract        | Object           | 合约信息     |
+-----------------+------------------+--------------+
| type            | Number           | 合约类型     |
+-----------------+------------------+--------------+
| payload         | String           | 合约代码     |
+-----------------+------------------+--------------+

错误码如下表：


+-------------------------+------------+-------------------------+
| 异常                    | 错误码     | 描述                    |
+=========================+============+=========================+
| INVALID_CONTRACTADDRESS | 11037      | Invalid contract        |
| _ERROR                  |            | address                 |
+-------------------------+------------+-------------------------+
| CONTRACTADDRESS_NOT_CON | 11038      | contractAddress is not  |
| TRACTACCOUNT_ERROR      |            | a  contract account     |
+-------------------------+------------+-------------------------+
| INVALID_CONTRACT_HASH   | 11025      | Invalid transaction hash|
| _ERROR                  |            | to create contract      |
+-------------------------+------------+-------------------------+
| SYSTEM_ERROR            | 20000      | System error            |
+-------------------------+------------+-------------------------+

具体示例如下所示：

::

 const contractAddress = 'buQqbhTrfAqZtiX79zp4MWwUVfpcadvtz2TM';
 sdk.contract.getInfo(contractAddress).then(result => {
  console.log(result);
 }).catch(err => {
  console.log(err.message);
 });


checkValid-contract
~~~~~~~~~~~~~~~~~~~~

``checkValid-contract`` 接口用于检测合约账户地址的有效性。

调用方法如下所示:

::

 sdk.contract.checkValid(contractAddress)

请求参数如下表：

+-----------------+------------------+--------------------+
| 参数            | 类型             | 描述               |
+=================+==================+====================+
| contractAddress | String           | 合约账户地址       |
+-----------------+------------------+--------------------+

响应数据如下表：

+-----------------+------------------+---------------------+
| 参数            | 类型             | 描述                |
+=================+==================+=====================+
| isValid         | boolean          | 合约账户地址是否有效|
+-----------------+------------------+---------------------+


错误码如下表：

+-------------------------------------------+------------+------------------------------------------+
| 异常                                      | 错误码     | 描述                                     |
+===========================================+============+==========================================+
| INVALID_CONTRACTADDRESS_ERROR             | 11037      | Invalid contract address                 |
+-------------------------------------------+------------+------------------------------------------+
| CONTRACTADDRESS_NOT_CONTRACTACCOUNT_ERROR | 11038      | ContractAddress is not a contract account|
+-------------------------------------------+------------+------------------------------------------+
| SYSTEM_ERROR                              | 20000      | System error                             |
+-------------------------------------------+------------+------------------------------------------+

具体示例如下所示：

::

 const contractAddress = 'buQhP94E8FjWDF3zfsxjqVQDeBypvzMrB3y3';
 sdk.contract.checkValid(contractAddress).then(result => {
  console.log(result);
 }).catch(err => {
  console.log(err.message);
 });








getAddress-contract
~~~~~~~~~~~~~~~~~~~~

``getAddress-contract``  接口用于查询合约地址。

调用方法如下所示:

::

 sdk.contract.getAddress(hash)

请求参数如下表：

+-----------------+------------------+--------------------+
| 参数            | 类型             | 描述               |
+=================+==================+====================+
| hash            | String           | 创建合约交易的 hash|
+-----------------+------------------+--------------------+

响应数据如下表：


+---------------------+------------------+--------------------+
| 参数                | 类型             | 描述               |
+=====================+==================+====================+
| contractAddressList | List             | 合约地址列表       |
+---------------------+------------------+--------------------+

错误码如下表：

+-------------------------+------------+-------------------------+
| 异常                    | 错误码     | 描述                    |
+=========================+============+=========================+
| INVALID_HASH_ERROR      | 11055      | Invalid transaction hash|
+-------------------------+------------+-------------------------+
| SYSTEM_ERROR            | 20000      | System error            |
+-------------------------+------------+-------------------------+

具体示例如下所示：

::

 const hash = 'f298d08ec3987adc3aeef73e81cbb49cbad2316145ba190700de2d78657880c0';
 sdk.contract.getAddress(hash).then(data => {
  console.log(data);
 })



接口对象类型参考
^^^^^^^^^^^^^^^

响应数据中 contractAddressList 中元素为 ContractAddressInfo 类型，其属性包括：

+------------------+------------------+--------------------+
| 成员             | 类型             | 描述               |
+==================+==================+====================+
| contract_address | String           | 合约地址           |
+------------------+------------------+--------------------+
| operation_index  | Number           | 所在操作的下标     |
+------------------+------------------+--------------------+


工具
----

本章节提供一些具有转换功能的接口，包括：``utfToHex``、``hexToUtf``、``buToMo``、``moToBu``。

utfToHex
~~~~~~~~~

``utfToHex`` 接口用于将 utf8 字符串转换成十六进制字符串。

调用方法如下所示:

::

 sdk.util.utfToHex(str)

请求参数如下表：

+-----------------+------------------+--------------------+
| 参数            | 类型             | 描述               |
+=================+==================+====================+
| str             | String           | 待转换的字符串     |
+-----------------+------------------+--------------------+

响应数据为十六进制字符串，当参数不正确时，响应参数为 **undefined**。

具体示例如下所示：

::
  
  const hexString = sdk.util.utfToHex('hello, world');
  console.log(hexString);

hexToUtf
~~~~~~~~~

``hexToUtf`` 接口用于将十六进制字符串转换成 utf8 字符串。

调用方法如下所示:

::

 sdk.util.hexToUtf(str)

请求参数如下表：

+-----------------+------------------+--------------------+
| 参数            | 类型             | 描述               |
+=================+==================+====================+
| str             | String           | 待转换的字符串     |
+-----------------+------------------+--------------------+

响应数据为 utf8 字符串，当参数不正确时，响应参数为 **undefined**。

具体示例如下所示：

::

 const utfString = sdk.util.hexToUtf('68656c6c6f2c20776f726c64');
 console.log(utfString);

buToMo
~~~~~~~

``buToMo`` 接口用于将 bu 转换成 mo。

调用方法如下所示:

::

 sdk.util.buToMo(str)

请求参数如下表：

+-----------------+------------------+-------------------------------------------+
| 参数            | 类型             | 描述                                      |
+=================+==================+===========================================+
| str             | String           | 待转换的字符串(字符串最多支持8位小数)     |
+-----------------+------------------+-------------------------------------------+


响应数据为字符串，当参数不正确时，响应参数为 **''** 。

具体示例如下所示：

::

 const mo = sdk.util.buToMo('5');
 console.log(mo);

moToBu
~~~~~~~

``moToBu`` 接口用于将 mo 转换 bu。

调用方法如下所示:

::

 sdk.util.moToBu(str)

请求参数如下表：

+-----------------+------------------+--------------------+
| 参数            | 类型             | 描述               |
+=================+==================+====================+
| str            | String            | 待转换的字符串     |
+-----------------+------------------+--------------------+

响应数据为字符串，当参数不正确时，响应参数为 **''** 。

具体示例如下所示：

::

 const bu = sdk.util.moToBu('500000000');
 console.log(bu);


错误码
------





+---------------------------------------------+--------+----------------------------------------------------+
| 异常                                        | 错误码 | 描述                                               |
+=============================================+========+====================================================+
| ACCOUNT_CREATE_ERROR                        | 11001  | Failed to create the account                       |
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_SOURCEADDRESS_ERROR                 | 11002  | Invalid sourceAddress                              |
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_DESTADDRESS_ERROR                   | 11003  | Invalid destAddress                                |    
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_INITBALANCE_ERROR                   | 11004  | InitBalance must be between 1 and max(int64)       |
+---------------------------------------------+--------+----------------------------------------------------+ 
| SOURCEADDRESS_EQUAL_DESTADDRESS_ERROR       | 11005  | SourceAddress cannot be equal to destAddress       |
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_ADDRESS_ERROR                       | 11006  | Invalid address                                    |    
+---------------------------------------------+--------+----------------------------------------------------+
| CONNECTNETWORK_ERROR                        | 11007  | Failed to connect to the network                   |
+---------------------------------------------+--------+----------------------------------------------------+
| METADATA_NOT_HEX_STRING_ERROR               | 11008  | Metadata must be a hex string                      |    
+---------------------------------------------+--------+----------------------------------------------------+
| NO_ASSET_ERROR                              | 11009  | The account does not have the asset                |
+---------------------------------------------+--------+----------------------------------------------------+ 
| NO_METADATA_ERROR                           | 11010  | The account does not have the metadata             |
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_DATAKEY_ERROR                       | 11011  | The length of key must be between 1 and 1024       |    
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_DATAVALUE_ERROR                     | 11012  | The length of value must be between 0 and 256000   |       
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_DATAVERSION_ERROR                   | 11013  | The version must be equal to or greater than 0     |
+---------------------------------------------+--------+----------------------------------------------------+  
| INVALID_MASTERWEIGHT_ERROR                  | 11015  | MasterWeight must be between 0 and max(uint32)     |    
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_SIGNER_ADDRESS_ERROR                | 11016  | Invalid signer address                             |    
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_SIGNER_WEIGHT_ERROR                 | 11017  | Signer weight must be between 0 and max(uint32)    |
+---------------------------------------------+--------+----------------------------------------------------+ 
| INVALID_TX_THRESHOLD_ERROR                  | 11018  | TxThreshold must be between 0 and max(int64)       |    
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_OPERATION_TYPE_ERROR                | 11019  | Operation type must be between 1 and 100           | 
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_TYPE_THRESHOLD_ERROR                | 11020  | TypeThreshold must be between 0 and max(int64)     |   
+---------------------------------------------+--------+----------------------------------------------------+ 
| INVALID_ASSET_CODE_ERROR                    | 11023  | The length of key must be between 1 and 1024       |    
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_ASSET_AMOUNT_ERROR                  | 11024  | AssetAmount must be between 1 and max(int64)       |          
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_BU_AMOUNT_ERROR                     | 11026  | BuAmount must between 1 and max(int64)             |     
+---------------------------------------------+--------+----------------------------------------------------+ 
| INVALID_ISSUER_ADDRESS_ERROR                | 11027  | Invalid issuer address                             |    
+---------------------------------------------+--------+----------------------------------------------------+
| NO_SUCH_TOKEN_ERROR                         | 11030  | No such token                                      |    
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_TOKEN_NAME_ERROR                    | 11031  | The length of token name must be between 1 and 1024|
+---------------------------------------------+--------+----------------------------------------------------+ 
| INVALID_TOKEN_SIMBOL_ERROR                  | 11032  | The length of symbol must be between 1 and 1024    |    
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_TOKEN_DECIMALS_ERROR                | 11033  | Decimals must be less than 8                       |
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_TOKEN_TOTALSUPPLY_ERROR             | 11034  | TotalSupply must be between 1 and max(int64)       |    
+---------------------------------------------+--------+----------------------------------------------------+ 
| INVALID_TOKENOWNER_ERRPR                    | 11035  | Invalid token owner                                |      
+---------------------------------------------+--------+----------------------------------------------------+ 
| INVALID_CONTRACTADDRESS_ERROR               | 11037  | Invalid contract address                           |    
+---------------------------------------------+--------+----------------------------------------------------+
| CONTRACTADDRESS_NOT_CONTRACTACCOUNT_ERROR   | 11038  | contractAddress is not a contract account          |
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_TOKEN_AMOUNT_ERROR                  | 11039  | Amount must be between 1 and max(int64)            |  
+---------------------------------------------+--------+----------------------------------------------------+  
| SOURCEADDRESS_EQUAL_CONTRACTADDRESS_ERROR   | 11040  | SourceAddress cannot be equal to contractAddress   |                                    
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_FROMADDRESS_ERROR                   | 11041  | Invalid fromAddress                                |    
+---------------------------------------------+--------+----------------------------------------------------+
| FROMADDRESS_EQUAL_DESTADDRESS_ERROR         | 11042  | FromAddress cannot be equal to destAddress         |          
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_SPENDER_ERROR                       | 11043  | Invalid spender                                    |      
+---------------------------------------------+--------+----------------------------------------------------+ 
| INVALID_LOG_TOPIC_ERROR                     | 11045  | The length of log topic must be between 1 and 128  |                                    
+---------------------------------------------+--------+----------------------------------------------------+ 
| INVALID_LOG_DATA_ERROR                      | 11046  | The length of log data must be between 1 and 1024  |  
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_NONCE_ERROR                         | 11048  | Nonce must be between 1 and max(int64)             |             
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_GASPRICE_ERROR                      | 11049  | Amount must be between gasPrice in block           |    
|                                             |        | and max(int64)                                     |
+---------------------------------------------+--------+----------------------------------------------------+ 
| INVALID_FEELIMIT_ERROR                      | 11050  | FeeLimit must be between 1 and max(int64)          |                                    
+---------------------------------------------+--------+----------------------------------------------------+ 
| OPERATIONS_EMPTY_ERROR                      | 11051  | Operations cannot be empty                         |    
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_CEILLEDGERSEQ_ERROR                 | 11052  | CeilLedgerSeq must be greater than or equal to 0   |                   
+---------------------------------------------+--------+----------------------------------------------------+
| OPERATIONS_ONE_ERROR                        | 11053  | One of the operations cannot be resolved           |                              
+---------------------------------------------+--------+----------------------------------------------------+ 
| INVALID_SIGNATURENUMBER_ERROR               | 11054  | SignatureNumber must be between 1 and max(int32)   |                                    
+---------------------------------------------+--------+----------------------------------------------------+ 
| INVALID_HASH_ERROR                          | 11055  | Invalid transaction hash                           |    
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_BLOB_ERROR                          | 11056  | Invalid blob                                       |    
+---------------------------------------------+--------+----------------------------------------------------+
| PRIVATEKEY_NULL_ERROR                       | 11057  | PrivateKeys cannot be empty                        |      
+---------------------------------------------+--------+----------------------------------------------------+ 
| PRIVATEKEY_ONE_ERROR                        | 11058  | One of the privateKeys is invalid                  |                                    
+---------------------------------------------+--------+----------------------------------------------------+ 
| URL_EMPTY_ERROR                             | 11062  | Url cannot be empty                                |    
+---------------------------------------------+--------+----------------------------------------------------+
| CONTRACTADDRESS_CODE_BOTH_NULL_ERROR        | 11063  | ContractAddress and code cannot                    |                    
|                                             |        | be empty at the same time                          | 
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_OPTTYPE_ERROR                       | 11064  | OptType must be between 0 and 2                    |      
+---------------------------------------------+--------+----------------------------------------------------+ 
| GET_ALLOWANCE_ERROR                         | 11065  | Failed to get allowance                            |      
+---------------------------------------------+--------+----------------------------------------------------+ 
| GET_TOKEN_INFO_ERROR                        | 11066  | Failed to get token info                           |                                    
+---------------------------------------------+--------+----------------------------------------------------+ 
| CONNECTN_BLOCKCHAIN_ERROR                   | 19999  | Failed to connect to the blockchain                |    
+---------------------------------------------+--------+----------------------------------------------------+
| SYSTEM_ERROR                                | 20000  | System error                                       |      
+---------------------------------------------+--------+----------------------------------------------------+ 
| ACCOUNT_NOT_EXIST                           | 15001  | Account does not exist                             |      
+---------------------------------------------+--------+----------------------------------------------------+ 
| INVALID_NUMBER_OF_ARG                       | 15006  | Invalid arguments number to the function           |                                    
+---------------------------------------------+--------+----------------------------------------------------+ 
| QUERY_RESULT_NOT_EXIST                      | 15014  | Query result does not exist                        |    
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_ARGUMENTS                           | 15016  | Invalid arguments to the function                  |    
+---------------------------------------------+--------+----------------------------------------------------+
| FAIL                                        | 15017  | Fail                                               |      
+---------------------------------------------+--------+----------------------------------------------------+   
| INVALID_FORMAT_OF_ARG                       | 15019  | Invalid argument format to the function            |                                    
+---------------------------------------------+--------+----------------------------------------------------+ 
| INVALID_OPERATIONS                          | 15022  | Invalid operation                                  |    
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_SIGNATURE_ERROR                     | 15027  | Invalid signature                                  |    
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_METADATA_ERROR                      | 15028  | Invalid metadata                                   |      
+---------------------------------------------+--------+----------------------------------------------------+ 
| INVALID_DELETEFLAG_ERROR                    | 15029  | DeleteFlag must be a boolean                       |                                    
+---------------------------------------------+--------+----------------------------------------------------+ 
| INVALID_CONTRACT_BU_AMOUNT_ERROR            | 15030  | BuAmount must be between 0 and max(int64)          |    
+---------------------------------------------+--------+----------------------------------------------------+
| INVALID_CONTRACT_ASSET_AMOUNT_ERROR         | 15031  | AssetAmount must be between 0 and max(int64)       |                              
+---------------------------------------------+--------+----------------------------------------------------+